
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_TestLayout.cshtml";
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .custom-style {
            font-size: 16px;
            font-family: Arial, sans-serif;
            margin: 0 0 20px;
            color: #000; /* Siyah yazı rengi */
            background-color: #fff; /* Beyaz arka plan */
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
            color: #333;
        }

        .container {
            width: 80%;
            margin: 20px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        /* Profil Alanı */
        .profile-header {
            display: flex;
            align-items: center;
            border-bottom: 2px solid #ddd;
            padding-bottom: 20px;
        }

        .profile-left {
            flex: 1;
            text-align: center;
        }

        .profile-img {
            width: 180px;
            height: 180px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
        }

        .profile-left h1 {
            font-size: 20px;
            margin: 0;
        }

        .profile-right {
            flex: 2;
            padding-left: 20px;
        }

            .profile-right h2 {
                font-size: 18px;
                margin: 0 0 10px 0;
            }

        .contact-info p {
            margin: 5px 0;
        }

        /* Diğer Bölümler */
        section {
            margin-top: 20px;
        }

        h3 {
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            margin-bottom: 10px;
        }

        .projects ul {
            list-style-type: none;
            padding: 0;
        }

        .projects li {
            margin: 10px 0;
            .contact-info

        {
            display: flex;
            flex-direction: column; /* Satırları üst üste hizalar */
            gap: 10px; /* Satırlar arasına boşluk ekler */
        }


        .row {
            display: flex;
            justify-content: space-between; /* İki öğeyi yatayda hizalar */
            align-items: center; /* Yatayda hizalama */
        }

            .row p {
                flex: 1; /* Eşit alan dağılımı sağlar */
                margin: 0; /* Varsayılan boşlukları kaldırır */
            }

        }

        .contact-info {
            display: flex;
            flex-direction: column; /* Satırları üst üste hizalar */
            gap: 10px; /* Satırlar arasına boşluk ekler */
        }

        .genelbilgiler-row {
            display: flex;
            justify-content: space-between; /* İki öğeyi yatayda hizalar */
            width: 100%; /* Kapsayıcıya tüm genişliği ver */
        }

        .phone-row p {
            margin: 0; /* Varsayılan boşlukları kaldırır */
        }

        .parafraf-baslıkları {
            font-size: 18px;
            font-family: 'Montserrat', sans-serif;
            color: #A2365A;
        }

        ul {
            list-style-type: disc;
            margin-left: 20px;
            color: #333;
        }
    </style>
    <style>
        /*
        * Always set the map height explicitly to define the size of the div element
        * that contains the map.
        */
        #map {
            height: 566px;
            width: 100%;
        }

        /*
        * Optional: Makes the sample page fill the window.
        */
        html,
        body {
            height: 90%;
            margin: 0;
            padding: 0;
        }

        #place-autocomplete-card {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
            margin: 10px;
            padding: 5px;
            font-family: Roboto, sans-serif;
            font-size: large;
            font-weight: bold;
        }

        gmp-place-autocomplete {
            width: 300px;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #map #infowindow-content {
            display: inline;
        }
    </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Onur Sönmez - Junior Software Developer</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>
<body>


    <div class="container">
        <div class="place-autocomplete-card" id="place-autocomplete-card">
            <p>Konum Giriniz</p>
        </div>
        <div id="map"></div>
        <h3 class="parafraf-baslıkları" style="text-align: center;">YETENEKLER</h3>

        <div style="display: flex; justify-content: space-around; align-items: center; gap: 20px;">
            <div>
                <canvas id="myPieChart1" width="300" height="300"></canvas>
            </div>
            <div>
                <canvas id="myPieChart2" width="300" height="300"></canvas>
            </div>
        </div>
    </div>
    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "AIzaSyBhztaPOLCX-EQYLGg2f0JKMTAzK9dzqNk", v: "beta" });</script>
</body>
</html>
<script>
    let map;
    let marker;
    let infoWindow;

    async function initMap() {
        // Request needed libraries.
        const [{ Map }, { AdvancedMarkerElement }] = await Promise.all([
            google.maps.importLibrary("marker"),
            google.maps.importLibrary("places"),
        ]);

        // Initialize the map.
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 40.749933, lng: -73.98633 },
            zoom: 13,
            mapId: "4504f8b37365c3d0",
            mapTypeControl: false,
        });

        const placeAutocomplete = new google.maps.places.PlaceAutocompleteElement();

        placeAutocomplete.id = "place-autocomplete-input";

        const card = document.getElementById("place-autocomplete-card");

        card.appendChild(placeAutocomplete);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);
        // Create the marker and infowindow
        marker = new google.maps.marker.AdvancedMarkerElement({
            map,
        });
        infoWindow = new google.maps.InfoWindow({});
        // Add the gmp-placeselect listener, and display the results on the map.
        placeAutocomplete.addEventListener("gmp-placeselect", async ({ place }) => {
            await place.fetchFields({
                fields: ["displayName", "formattedAddress", "location"],
            });
            // If the place has a geometry, then present it on a map.
            if (place.viewport) {
                map.fitBounds(place.viewport);
            } else {
                map.setCenter(place.location);
                map.setZoom(17);
            }

            let content =
                '<div id="infowindow-content">' +
                '<span id="place-displayname" class="title">' +
                place.displayName +
                "</span><br />" +
                '<span id="place-address">' +
                place.formattedAddress +
                "</span>" +
                "</div>";

            updateInfoWindow(content, place.location);
            marker.position = place.location;
        });
    }

    // Helper function to create an info window.
    function updateInfoWindow(content, center) {
        infoWindow.setContent(content);
        infoWindow.setPosition(center);
        infoWindow.open({
            map,
            anchor: marker,
            shouldFocus: false,
        });
    }

    initMap();
</script>
<script>
    var ctx = document.getElementById('myPieChart1').getContext('2d');
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['ASP.NET', 'JAVA', 'JavaScript', 'Kotlin'], // Grafik segmentlerinin etiketleri
            datasets: [{
                label: '%',
                data: [40, 30, 15, 15], // Her bir segmentin değeri
                backgroundColor: ['#FF0000', '#ffde66', '#008080', '	#f4a460'], // Segment renkleri
                hoverOffset: 4, // Fare üzerine geldiğinde offset animasyonu
            }]
        },
        options: {
            responsive: true,
            animation: {
                animateScale: true, // Ölçek animasyonu
                animateRotate: true // Dönme animasyonu
            }
        }
    });
</script>
<script>
    var ctx = document.getElementById('myPieChart2').getContext('2d');
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Canva', 'Photoshop', 'FIGMA', 'Fıreworks'], // Grafik segmentlerinin etiketleri
            datasets: [{
                label: '%',
                data: [35, 35, 15, 15], // Her bir segmentin değeri
                backgroundColor: ['#ee1289', '#8deeee', '#ffdead', '#ffe4e1'], // Segment renkleri
                hoverOffset: 4, // Fare üzerine geldiğinde offset animasyonu
            }]
        },
        options: {
            responsive: true,
            animation: {
                animateScale: true, // Ölçek animasyonu
                animateRotate: true // Dönme animasyonu
            }
        }
    });
</script>
</body>
</html>